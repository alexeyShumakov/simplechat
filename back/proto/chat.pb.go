// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

package chat

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Value                string   `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	Created              string   `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	UserName             string   `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Message) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *Message) GetUserName() string {
	if m != nil {
		return m.UserName
	}
	return ""
}

type Counters struct {
	TotalMessages        int32    `protobuf:"varint,1,opt,name=totalMessages,proto3" json:"totalMessages,omitempty"`
	UsersOnline          int32    `protobuf:"varint,2,opt,name=usersOnline,proto3" json:"usersOnline,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Counters) Reset()         { *m = Counters{} }
func (m *Counters) String() string { return proto.CompactTextString(m) }
func (*Counters) ProtoMessage()    {}
func (*Counters) Descriptor() ([]byte, []int) {
	return fileDescriptor_8c585a45e2093e54, []int{1}
}

func (m *Counters) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Counters.Unmarshal(m, b)
}
func (m *Counters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Counters.Marshal(b, m, deterministic)
}
func (m *Counters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Counters.Merge(m, src)
}
func (m *Counters) XXX_Size() int {
	return xxx_messageInfo_Counters.Size(m)
}
func (m *Counters) XXX_DiscardUnknown() {
	xxx_messageInfo_Counters.DiscardUnknown(m)
}

var xxx_messageInfo_Counters proto.InternalMessageInfo

func (m *Counters) GetTotalMessages() int32 {
	if m != nil {
		return m.TotalMessages
	}
	return 0
}

func (m *Counters) GetUsersOnline() int32 {
	if m != nil {
		return m.UsersOnline
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "chat.Message")
	proto.RegisterType((*Counters)(nil), "chat.Counters")
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor_8c585a45e2093e54) }

var fileDescriptor_8c585a45e2093e54 = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0x3d, 0x4e, 0x03, 0x31,
	0x10, 0x85, 0x63, 0x60, 0x49, 0x32, 0x91, 0x29, 0x46, 0x14, 0x56, 0xaa, 0xc8, 0xa2, 0x48, 0x15,
	0x50, 0x72, 0x84, 0x2d, 0xa8, 0x00, 0xc9, 0x12, 0x07, 0x30, 0xcb, 0x68, 0x17, 0x69, 0xb1, 0x91,
	0x3d, 0xcb, 0x8d, 0xb8, 0x27, 0xb2, 0xf7, 0x47, 0x2c, 0x4d, 0x3a, 0x7f, 0x6f, 0xe6, 0xf9, 0x3d,
	0x1b, 0xa0, 0x6a, 0x2c, 0x1f, 0xbe, 0x82, 0x67, 0x8f, 0x57, 0xe9, 0xac, 0x5f, 0x61, 0xf9, 0x44,
	0x31, 0xda, 0x9a, 0xf0, 0x16, 0x8a, 0x6f, 0xdb, 0x76, 0xa4, 0xc4, 0x4e, 0xec, 0xd7, 0xa6, 0x07,
	0x54, 0xb0, 0xac, 0x02, 0x59, 0xa6, 0x77, 0x75, 0x91, 0xf5, 0x11, 0x71, 0x0b, 0xab, 0x2e, 0x52,
	0x78, 0xb6, 0x9f, 0xa4, 0x2e, 0xf3, 0x68, 0x62, 0x6d, 0x60, 0x55, 0xfa, 0xce, 0x31, 0x85, 0x88,
	0x77, 0x20, 0xd9, 0xb3, 0x6d, 0x87, 0x9c, 0x98, 0xef, 0x2f, 0xcc, 0x5c, 0xc4, 0x1d, 0x6c, 0x92,
	0x3b, 0xbe, 0xb8, 0xf6, 0xc3, 0x51, 0xce, 0x2a, 0xcc, 0x5f, 0xe9, 0xf8, 0x23, 0x60, 0x9d, 0xd6,
	0xc9, 0xd5, 0x14, 0xf0, 0x1e, 0x64, 0x99, 0x8b, 0x8c, 0xf5, 0xe5, 0x21, 0x3f, 0x6e, 0xc0, 0xed,
	0x1c, 0xf5, 0x02, 0x8f, 0xb0, 0x79, 0x24, 0x9e, 0x5a, 0xfd, 0x5b, 0xbf, 0xe9, 0x71, 0x1c, 0xeb,
	0xc5, 0x5e, 0x3c, 0x08, 0x3c, 0x81, 0x9c, 0x12, 0xcb, 0xc6, 0xf2, 0xb9, 0x90, 0x64, 0x7a, 0xbb,
	0xce, 0xff, 0x7b, 0xfa, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xd0, 0x11, 0xb6, 0x1e, 0x6d, 0x01, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MessengerClient is the client API for Messenger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MessengerClient interface {
	CreateMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	GetCounters(ctx context.Context, opts ...grpc.CallOption) (Messenger_GetCountersClient, error)
	MessengerChat(ctx context.Context, opts ...grpc.CallOption) (Messenger_MessengerChatClient, error)
}

type messengerClient struct {
	cc *grpc.ClientConn
}

func NewMessengerClient(cc *grpc.ClientConn) MessengerClient {
	return &messengerClient{cc}
}

func (c *messengerClient) CreateMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/chat.Messenger/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messengerClient) GetCounters(ctx context.Context, opts ...grpc.CallOption) (Messenger_GetCountersClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messenger_serviceDesc.Streams[0], "/chat.Messenger/GetCounters", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerGetCountersClient{stream}
	return x, nil
}

type Messenger_GetCountersClient interface {
	Send(*Message) error
	Recv() (*Counters, error)
	grpc.ClientStream
}

type messengerGetCountersClient struct {
	grpc.ClientStream
}

func (x *messengerGetCountersClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messengerGetCountersClient) Recv() (*Counters, error) {
	m := new(Counters)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messengerClient) MessengerChat(ctx context.Context, opts ...grpc.CallOption) (Messenger_MessengerChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Messenger_serviceDesc.Streams[1], "/chat.Messenger/MessengerChat", opts...)
	if err != nil {
		return nil, err
	}
	x := &messengerMessengerChatClient{stream}
	return x, nil
}

type Messenger_MessengerChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type messengerMessengerChatClient struct {
	grpc.ClientStream
}

func (x *messengerMessengerChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messengerMessengerChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessengerServer is the server API for Messenger service.
type MessengerServer interface {
	CreateMessage(context.Context, *Message) (*Message, error)
	GetCounters(Messenger_GetCountersServer) error
	MessengerChat(Messenger_MessengerChatServer) error
}

// UnimplementedMessengerServer can be embedded to have forward compatible implementations.
type UnimplementedMessengerServer struct {
}

func (*UnimplementedMessengerServer) CreateMessage(ctx context.Context, req *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (*UnimplementedMessengerServer) GetCounters(srv Messenger_GetCountersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetCounters not implemented")
}
func (*UnimplementedMessengerServer) MessengerChat(srv Messenger_MessengerChatServer) error {
	return status.Errorf(codes.Unimplemented, "method MessengerChat not implemented")
}

func RegisterMessengerServer(s *grpc.Server, srv MessengerServer) {
	s.RegisterService(&_Messenger_serviceDesc, srv)
}

func _Messenger_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessengerServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.Messenger/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessengerServer).CreateMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Messenger_GetCounters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessengerServer).GetCounters(&messengerGetCountersServer{stream})
}

type Messenger_GetCountersServer interface {
	Send(*Counters) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type messengerGetCountersServer struct {
	grpc.ServerStream
}

func (x *messengerGetCountersServer) Send(m *Counters) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messengerGetCountersServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Messenger_MessengerChat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessengerServer).MessengerChat(&messengerMessengerChatServer{stream})
}

type Messenger_MessengerChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type messengerMessengerChatServer struct {
	grpc.ServerStream
}

func (x *messengerMessengerChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messengerMessengerChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Messenger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.Messenger",
	HandlerType: (*MessengerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMessage",
			Handler:    _Messenger_CreateMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetCounters",
			Handler:       _Messenger_GetCounters_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "MessengerChat",
			Handler:       _Messenger_MessengerChat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
